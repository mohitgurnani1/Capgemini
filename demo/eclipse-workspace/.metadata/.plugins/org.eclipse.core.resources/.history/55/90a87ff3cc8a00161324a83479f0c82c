package com.flp.ems.dao;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;

import com.flp.ems.domain.Department;
import com.flp.ems.domain.Employee;
import com.flp.ems.domain.Project;
import com.flp.ems.domain.Role;

public class EmployeeDaoImplForList implements IEmployeeDao {

	private static EmployeeDaoImplForList dao=null;
	Properties prop;
	Connection conn;
	
	private EmployeeDaoImplForList()  {
		dao=this; 
		prop=new Properties();
		try
		{
		prop.load(new FileInputStream("dbDetails.properties"));
		String url=prop.getProperty("jdbc.url");
		String uname=prop.getProperty("jdbc.username");
		String pwd=prop.getProperty("jdbc.password");
		conn=DriverManager.getConnection(url,uname,pwd);
		}
		catch(Exception e){
			e.printStackTrace();
		}
 }

synchronized public static  EmployeeDaoImplForList getDaoReference(){
	 if(dao==null)
		 return new EmployeeDaoImplForList();
	 else
		 return dao;
 }
 
 
 
	@Override
	public void AddEmployee(Employee emp) {
		
		String sql=prop.getProperty("jdbc.query.insertEmployee");
		try(PreparedStatement ps=conn.prepareStatement(sql);){
		
			ps.setString(1, emp.getEmpId());
			ps.setString(2, emp.getName());
			ps.setString(3, emp.getKinId());
			ps.setString(4, emp.getEmailId());
			ps.setString(5, emp.getPhoneNo());
			ps.setDate(6, (Date) emp.getDob());
			ps.setDate(7, (Date) emp.getDoj());
			ps.setString(8, emp.getAddress());
			ps.setString(9,emp.getDepid().getDeptId());
			ps.setString(10, emp.getProjid().getProjId());
			ps.setString(11, emp.getRoleid().getRoleId());
			
			System.out.println("Rows affected "+ps.executeUpdate());
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void ModifyEmployee(Employee emp) {
		String empId=emp.getEmpId();
		String sql=prop.getProperty("jdbc.query.modifyEmployee");
		try(PreparedStatement ps=conn.prepareStatement(sql);){
		ps.setString(1, empId);
		System.out.println("Rows affected "+ps.executeUpdate());
			} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		AddEmployee(emp);	
	}

	@Override
	public void RemoveEmployee(String key, String value) {
	//	Employee temp=null;
		String sql=prop.getProperty("jdbc.query.removeEmployee");
		try(PreparedStatement ps=conn.prepareStatement(sql);){
				ps.setString(1, key);
				ps.setString(2, value);
				System.out.println("Rows affected "+ps.executeUpdate());
			} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	/*	if(key.equals("kinId"))
			for(Employee e: empList){
				if(e.getKinId().equals(value))
				{
				temp=e;
				break;
				}
			}
			else if(key.equals("name"))
			{
				
				for(Employee e: empList){
					if(e.getName().equals(value))
					{
					temp=e;
					break;
					}

				}
			}
			else{
				
				for(Employee e: empList){
					if(e.getEmailId().equals(value))
					{
					temp=e;
					break;
					}
				
			}

		}
		
		if(temp!=null){
		empList.remove(temp);
		return true;
		}
			
		return false;
*/	}

	@Override
	public Employee SearchEmployee(HashMap<String, String> emp) {
		Employee temp=null;
		/*if(emp.containsKey("kinId"))
		for(Employee e: empList){
			if(e.getKinId().equals(emp.get("kinId")))
			{
			temp=e;
			break;
			}
		}
		else if(emp.containsKey("name"))
		{
			
			for(Employee e: empList){
				if(e.getName().equals(emp.get("name")))
				{
				temp=e;
				break;
				}

			}
		}
		else{
			
			for(Employee e: empList){
				if(e.getEmailId().equals(emp.get("emailId")))
				{
				temp=e;
				break;
				}
			
		}
		
		}	
		
		if(temp!=null){
		return temp;
		}
		else
*/		return null;
	}

	@Override
	public ArrayList<Employee> getAllEmployee() {
	ArrayList<Employee> empList=new ArrayList<Employee>();
	String selectSQL = "SELECT USER_ID, USERNAME FROM DBUSER WHERE USER_ID = ?";
	/*
	PreparedStatement preparedStatement = dbConnection.prepareStatement(selectSQL);
	preparedStatement.setInt(1, 1001);
	ResultSet rs = preparedStatement.executeQuery(selectSQL );
	while (rs.next()) {
		String userid = rs.getString("USER_ID");
		String username = rs.getString("USERNAME");
	}
		
		*/
		
		
		return empList;
	}

	public ArrayList<Department> getDepartmentList() {
		ArrayList<Department> deptList=new ArrayList<Department>();
		String selectSQL = prop.getProperty("jdbc.query.SAD");
		
		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		
		ResultSet rs = preparedStatement.executeQuery(selectSQL );
	
		while (rs.next()) 
			deptList.add(new Department(rs.getString("deptId"), rs.getString("name"), rs.getString("description")));
		
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		
		return deptList;
	}

	public Department getDeptById(String deptid){
		Department dept=null;
		String selectSQL = prop.getProperty("jdbc.query.SD");
		
		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		preparedStatement.setString(1, deptid);
			
		ResultSet rs = preparedStatement.executeQuery(selectSQL );
	
		if (rs.next()) 
			dept=new Department(rs.getString("deptId"), rs.getString("name"), rs.getString("description"));
		
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return dept;
		}
	
	public Role getRoleById(String roleId){
		
		Role role=null;
		String selectSQL = prop.getProperty("jdbc.query.SR");
		
		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		preparedStatement.setString(1, roleId);
			
		ResultSet rs = preparedStatement.executeQuery(selectSQL );
	
		if (rs.next()) 
			role=new Role(rs.getString("roleId"), rs.getString("name"), rs.getString("description"));
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return role;
	
	
	
	
	}
		
	public Project getProjectById(String projId){
		for(Project p:projectList)
		{
			if(p.getProjId().equals(projId)){
				return p;
			}
		}
		return null;
	}
	
	public ArrayList<Project> getProjectList(String deptid) {
		Department d=getDeptById(deptid);
		ArrayList<Project> temp=new ArrayList<Project>();
		for(Project p:projectList)
		{
			if(p.getDepId().equals(d))
				temp.add(p);
		}		
		return temp;
	}

	public ArrayList<Role> getRoleList() {
		return roleList;
	}

	public Employee getEmployeeByEmailId(String emailId) {
		for(Employee e:empList)
		{
			if(e.getEmailId().equals(emailId)){
				return e;
			}
		}
		return null;
	}

}
